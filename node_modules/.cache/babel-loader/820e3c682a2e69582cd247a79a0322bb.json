{"ast":null,"code":"const clientId = '94eef475b40b4db5bb9ad65266f49b34';\nconst redirectUri = 'http://localhost:3003/';\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } // check for acces token match\n\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]); //This clears the parameters, allowing us to grab a new access token when it expires\n\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access token', null, '/');\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n      console.log(accessUrl);\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    console.log(accessToken);\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      //console.log(response.json())\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artist[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    }).catch(error => {\n      console.log(error);\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      });\n    }).then(response => response.json()).then(jsonResponse => {\n      const playlistId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          uris: trackUris\n        })\n      });\n    });\n  }\n\n};\nexport default Spotify; //   search(term) {\n//     const searchUrl = `https://api.spotify.com/v1/search?type=track&q=${term.replace(' ', '%20')}`;\n//     return fetch(searchUrl, {\n//         headers: {\n//           Authorization: `Bearer ${accessToken}`\n//         }\n//       })\n//       .then(response => response.json())\n//       .then(jsonResponse => {\n//         if (!jsonResponse.tracks) return [];\n//         return jsonResponse.tracks.items.map(track => {\n//           return {\n//             id: track.id,\n//             name: track.name,\n//             artist: track.artists[0].name,\n//             album: track.album.name,\n//             uri: track.uri\n//           }\n//         })\n//       });\n//   },\n//   savePlaylist(name, trackUris) {\n//     if (!name || !trackUris || trackUris.length === 0) return;\n//     const userUrl = 'https://api.spotify.com/v1/me';\n//     const headers = {\n//       Authorization: `Bearer ${accessToken}`\n//     };\n//     let userId = undefined;\n//     let playlistId = undefined;\n//     fetch(userUrl, {\n//       headers: headers \n//     })\n//     .then(response => response.json())\n//     .then(jsonResponse => userId = jsonResponse.id)\n//     .then(() => {\n//       const createPlaylistUrl = `https://api.spotify.com/v1/users/${userId}/playlists`;\n//       fetch(createPlaylistUrl, {\n//           method: 'POST',\n//           headers: headers,\n//           body: JSON.stringify({\n//             name: name\n//           })\n//         })\n//         .then(response => response.json())\n//         .then(jsonResponse => playlistId = jsonResponse.id)\n//         .then(() => {\n//           const addPlaylistTracksUrl = `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`;\n//           fetch(addPlaylistTracksUrl, {\n//             method: 'POST',\n//             headers: headers,\n//             body: JSON.stringify({\n//               uris: trackUris\n//             })\n//           });\n//         })\n//     })\n//   }\n// };","map":{"version":3,"sources":["D:/Desktop - Data Drive/AnimalProject/codeacademy-jamming-react/jamming/src/util/Spotify.js"],"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","console","log","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","album","uri","catch","error","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris"],"mappings":"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","sourcesContent":["const clientId = '94eef475b40b4db5bb9ad65266f49b34';\r\nconst redirectUri = 'http://localhost:3003/';\r\nlet accessToken;\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n\r\n        // check for acces token match\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if (accessTokenMatch && expiresInMatch) {\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1])\r\n            //This clears the parameters, allowing us to grab a new access token when it expires\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access token', null, '/');\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n            window.location = accessUrl;\r\n            console.log(accessUrl);\r\n        }\r\n    },\r\n\r\n    search(term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        console.log(accessToken)\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,\r\n            {\r\n                headers: {\r\n                    Authorization: `Bearer ${accessToken}`\r\n                }\r\n            }).then(response => {\r\n                //console.log(response.json())\r\n                return response.json()\r\n            }).then(jsonResponse => {\r\n                if (!jsonResponse.tracks) {\r\n                    return []\r\n                }\r\n                return jsonResponse.tracks.items.map(track => ({\r\n                    id: track.id,\r\n                    name: track.name,\r\n                    artist: track.artist[0].name,\r\n                    album: track.album.name,\r\n                    uri: track.uri\r\n                }))\r\n            }).catch(error => {\r\n                console.log(error)\r\n            })\r\n    },\r\n\r\n    savePlaylist(name, trackUris) {\r\n        if (!name || !trackUris.length) {\r\n            return;\r\n        }\r\n\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = { Authorization: `Bearer ${accessToken}` };\r\n        let userId;\r\n\r\n        return fetch('https://api.spotify.com/v1/me', { headers: headers }\r\n        ).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n            userId = jsonResponse.id;\r\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\r\n            {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({ name: name })\r\n            })\r\n        }).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n            const playlistId = jsonResponse.id;\r\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({uris: trackUris})\r\n            })\r\n        })\r\n    }\r\n}\r\nexport default Spotify;\r\n\r\n//   search(term) {\r\n//     const searchUrl = `https://api.spotify.com/v1/search?type=track&q=${term.replace(' ', '%20')}`;\r\n//     return fetch(searchUrl, {\r\n//         headers: {\r\n//           Authorization: `Bearer ${accessToken}`\r\n//         }\r\n//       })\r\n//       .then(response => response.json())\r\n//       .then(jsonResponse => {\r\n//         if (!jsonResponse.tracks) return [];\r\n//         return jsonResponse.tracks.items.map(track => {\r\n//           return {\r\n//             id: track.id,\r\n//             name: track.name,\r\n//             artist: track.artists[0].name,\r\n//             album: track.album.name,\r\n//             uri: track.uri\r\n//           }\r\n//         })\r\n//       });\r\n//   },\r\n\r\n//   savePlaylist(name, trackUris) {\r\n//     if (!name || !trackUris || trackUris.length === 0) return;\r\n//     const userUrl = 'https://api.spotify.com/v1/me';\r\n//     const headers = {\r\n//       Authorization: `Bearer ${accessToken}`\r\n//     };\r\n//     let userId = undefined;\r\n//     let playlistId = undefined;\r\n//     fetch(userUrl, {\r\n//       headers: headers \r\n//     })\r\n//     .then(response => response.json())\r\n//     .then(jsonResponse => userId = jsonResponse.id)\r\n//     .then(() => {\r\n//       const createPlaylistUrl = `https://api.spotify.com/v1/users/${userId}/playlists`;\r\n//       fetch(createPlaylistUrl, {\r\n//           method: 'POST',\r\n//           headers: headers,\r\n//           body: JSON.stringify({\r\n//             name: name\r\n//           })\r\n//         })\r\n//         .then(response => response.json())\r\n//         .then(jsonResponse => playlistId = jsonResponse.id)\r\n//         .then(() => {\r\n//           const addPlaylistTracksUrl = `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`;\r\n//           fetch(addPlaylistTracksUrl, {\r\n//             method: 'POST',\r\n//             headers: headers,\r\n//             body: JSON.stringify({\r\n//               uris: trackUris\r\n//             })\r\n//           });\r\n//         })\r\n//     })\r\n//   }\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}