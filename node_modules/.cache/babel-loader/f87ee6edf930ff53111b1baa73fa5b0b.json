{"ast":null,"code":"var _jsxFileName = \"D:\\\\Desktop - Data Drive\\\\AnimalProject\\\\codeacademy-jamming-react\\\\jamming\\\\src\\\\Components\\\\App\\\\App.js\";\nimport React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nSpotify.getAccessToken();\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: \"\",\n      playlistTracks: []\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n\n    this._bind('addTrack', 'updatePlaylistName', 'removeTrack', 'savePlaylist', 'search');\n  } //original function redid to match other peoples code better\n  // addTrack(track) {\n  //   this.addTrack(playlistTracks => \n  //     playlistTracks.includes(track) ? \n  //     playlistTracks : [...playlistTracks, track]);\n  //     \n  // }\n  //renamed from addTrackToPlaylist make sure to catch all the renames\n  //the dots are spread operators\n\n\n  addTrack(track) {\n    if (!this.state.playlistTracks.find(playlistTrack => playlistTrack.id === track.id)) {\n      this.setState(prevState => ({\n        playlistTracks: [...prevState.playlistTracks, track]\n      }));\n    }\n  } //update playlist function that accepts a name and resets the playlistName state\n\n\n  updatePlaylistName(name) {\n    this.setState({\n      playlistName: name\n    });\n  }\n\n  removeTrack(track) {\n    this.setState({\n      playlistTracks: this.state.playlistTracks.filter(playlistTrack => playlistTrack.id !== track.id)\n    });\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(playlistTrack => playlistTrack.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris);\n    this.setState({\n      searchResults: []\n    });\n    this.updatePlaylistName(\"\");\n    console.info(trackUris);\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => this.setState({\n      searchResults: searchResults\n    }));\n  } //methods are bound to 'addTrack', 'updatePlaylistName'\n  // 'removeTrack', 'savePlaylist', 'search' so there is no need to put the ()\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Ja\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"highlight\",\n          children: \"mmm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), \"ing\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n          onSearch: this.search\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App-playlist\",\n          children: [/*#__PURE__*/_jsxDEV(SearchResults, {\n            searchResults: this.state.searchResults,\n            onAdd: this.addTrack\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Playlist, {\n            name: this.state.playlistName,\n            tracks: this.state.playlistTracks,\n            onRemove: this.removeTrack,\n            onNameChange: this.updatePlaylistName,\n            onSave: this.savePlaylist\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/Desktop - Data Drive/AnimalProject/codeacademy-jamming-react/jamming/src/Components/App/App.js"],"names":["React","SearchBar","SearchResults","Playlist","Spotify","getAccessToken","App","Component","constructor","props","state","searchResults","playlistName","playlistTracks","addTrack","bind","removeTrack","updatePlaylistName","savePlaylist","search","_bind","track","find","playlistTrack","id","setState","prevState","name","filter","trackUris","map","uri","console","info","term","then","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nimport './App.css';\r\nimport  SearchBar  from '../SearchBar/SearchBar';\r\nimport  SearchResults  from '../SearchResults/SearchResults';\r\nimport  Playlist  from '../Playlist/Playlist';\r\nimport Spotify from '../../util/Spotify';\r\n\r\nSpotify.getAccessToken();\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.state = {\r\n      searchResults: [],\r\n      playlistName: \"\",\r\n      playlistTracks: []\r\n    };\r\n\r\n    \r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\r\n    this.savePlaylist = this.savePlaylist.bind(this);\r\n    this.search = this.search.bind(this);\r\n    this._bind(\r\n      'addTrack', \r\n      'updatePlaylistName', \r\n      'removeTrack', \r\n      'savePlaylist', \r\n      'search');\r\n\r\n  }\r\n\r\n\r\n  //original function redid to match other peoples code better\r\n  // addTrack(track) {\r\n  //   this.addTrack(playlistTracks => \r\n  //     playlistTracks.includes(track) ? \r\n  //     playlistTracks : [...playlistTracks, track]);\r\n  //     \r\n  // }\r\n\r\n\r\n//renamed from addTrackToPlaylist make sure to catch all the renames\r\n//the dots are spread operators\r\naddTrack(track) {\r\n    if (!this.state.playlistTracks.find(playlistTrack => playlistTrack.id === track.id)) {\r\n      this.setState(prevState => ({\r\n        playlistTracks: [...prevState.playlistTracks, track]\r\n      }));\r\n    }\r\n  }\r\n\r\n  //update playlist function that accepts a name and resets the playlistName state\r\n  updatePlaylistName(name) {\r\n    this.setState({\r\n      playlistName: name\r\n    });\r\n  }\r\n\r\n\r\n  removeTrack(track) {\r\n    this.setState({\r\n      playlistTracks: this.state.playlistTracks.filter(playlistTrack => playlistTrack.id !== track.id)\r\n    });\r\n  }\r\n\r\n  savePlaylist() {\r\n    const trackUris = this.state.playlistTracks.map(playlistTrack => playlistTrack.uri);\r\n    Spotify.savePlaylist(this.state.playlistName, trackUris);\r\n    this.setState({\r\n      searchResults: []\r\n    });\r\n    this.updatePlaylistName(\"\");\r\n    console.info(trackUris);\r\n  }\r\n\r\n  search(term) {\r\n    Spotify.search(term)\r\n      .then(searchResults => this.setState({\r\n        searchResults: searchResults\r\n      }));\r\n  }\r\n\r\n//methods are bound to 'addTrack', 'updatePlaylistName'\r\n// 'removeTrack', 'savePlaylist', 'search' so there is no need to put the ()\r\n  \r\nrender() {\r\n\r\n  return (\r\n    <div>\r\n      <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\r\n        <div className=\"App\">\r\n        <SearchBar onSearch={this.search} />\r\n          <div className=\"App-playlist\">\r\n          <SearchResults \r\n            searchResults={this.state.searchResults}\r\n            onAdd={this.addTrack}/>\r\n\r\n          <Playlist \r\n            name={this.state.playlistName} \r\n            tracks={this.state.playlistTracks} \r\n            onRemove={this.removeTrack} \r\n            onNameChange={this.updatePlaylistName} \r\n            onSave={this.savePlaylist}/>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  );\r\n  }\r\n\r\n  }\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}