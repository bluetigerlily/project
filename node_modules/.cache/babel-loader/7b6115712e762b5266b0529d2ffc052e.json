{"ast":null,"code":"const clientId = ' 94eef475b40b4db5bb9ad65266f49b34';\nconst redirectUri = 'http://fredjam.surge.sh/';\nconst spotifyUrl = `https://accounts.spotify.com/authorize?response_type=token&scope=playlist-modify-public&client_id=${clientId}&redirect_uri=${redirectUri}`;\nlet accessToken = undefined;\nlet expiresIn = undefined;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const urlAccessToken = window.location.href.match(/access_token=([^&]*)/);\n    const urlExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (urlAccessToken && urlExpiresIn) {\n      accessToken = urlAccessToken[1];\n      expiresIn = urlExpiresIn[1];\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n    } else {\n      window.location = spotifyUrl;\n    }\n  },\n\n  search(term) {\n    const searchUrl = `https://api.spotify.com/v1/search?type=track&q=${term.replace(' ', '%20')}`;\n    return fetch(searchUrl, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => response.json()).then(jsonResponse => {\n      if (!jsonResponse.tracks) return [];\n      return jsonResponse.tracks.items.map(track => {\n        return {\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        };\n      });\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris || trackUris.length === 0) return;\n    const userUrl = 'https://api.spotify.com/v1/me';\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId = undefined;\n    let playlistId = undefined;\n    fetch(userUrl, {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => userId = jsonResponse.id).then(() => {\n      const createPlaylistUrl = `https://api.spotify.com/v1/users/${userId}/playlists`;\n      fetch(createPlaylistUrl, {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => playlistId = jsonResponse.id).then(() => {\n        const addPlaylistTracksUrl = `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`;\n        fetch(addPlaylistTracksUrl, {\n          method: 'POST',\n          headers: headers,\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["D:/Desktop - Data Drive/AnimalProject/codeacademy-jamming-react/jamming/src/util/Spotify.js"],"names":["clientId","redirectUri","spotifyUrl","accessToken","undefined","expiresIn","Spotify","getAccessToken","urlAccessToken","window","location","href","match","urlExpiresIn","setTimeout","history","pushState","search","term","searchUrl","replace","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","userUrl","userId","playlistId","createPlaylistUrl","method","body","JSON","stringify","addPlaylistTracksUrl","uris"],"mappings":"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","sourcesContent":["const clientId = ' 94eef475b40b4db5bb9ad65266f49b34';\r\nconst redirectUri = 'http://fredjam.surge.sh/';\r\nconst spotifyUrl = `https://accounts.spotify.com/authorize?response_type=token&scope=playlist-modify-public&client_id=${clientId}&redirect_uri=${redirectUri}`;\r\nlet accessToken = undefined;\r\nlet expiresIn = undefined;\r\n\r\nconst Spotify = {\r\n  getAccessToken() {\r\n    if (accessToken) {\r\n      return accessToken;\r\n    }\r\n    const urlAccessToken = window.location.href.match(/access_token=([^&]*)/);\r\n    const urlExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\r\n    if (urlAccessToken && urlExpiresIn) {\r\n      accessToken = urlAccessToken[1];\r\n      expiresIn = urlExpiresIn[1];\r\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n      window.history.pushState('Access Token', null, '/');\r\n    } else {\r\n      window.location = spotifyUrl;\r\n    }\r\n  },\r\n\r\n  search(term) {\r\n    const searchUrl = `https://api.spotify.com/v1/search?type=track&q=${term.replace(' ', '%20')}`;\r\n    return fetch(searchUrl, {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`\r\n        }\r\n      })\r\n      .then(response => response.json())\r\n      .then(jsonResponse => {\r\n        if (!jsonResponse.tracks) return [];\r\n        return jsonResponse.tracks.items.map(track => {\r\n          return {\r\n            id: track.id,\r\n            name: track.name,\r\n            artist: track.artists[0].name,\r\n            album: track.album.name,\r\n            uri: track.uri\r\n          }\r\n        })\r\n      });\r\n  },\r\n\r\n  savePlaylist(name, trackUris) {\r\n    if (!name || !trackUris || trackUris.length === 0) return;\r\n    const userUrl = 'https://api.spotify.com/v1/me';\r\n    const headers = {\r\n      Authorization: `Bearer ${accessToken}`\r\n    };\r\n    let userId = undefined;\r\n    let playlistId = undefined;\r\n    fetch(userUrl, {\r\n      headers: headers \r\n    })\r\n    .then(response => response.json())\r\n    .then(jsonResponse => userId = jsonResponse.id)\r\n    .then(() => {\r\n      const createPlaylistUrl = `https://api.spotify.com/v1/users/${userId}/playlists`;\r\n      fetch(createPlaylistUrl, {\r\n          method: 'POST',\r\n          headers: headers,\r\n          body: JSON.stringify({\r\n            name: name\r\n          })\r\n        })\r\n        .then(response => response.json())\r\n        .then(jsonResponse => playlistId = jsonResponse.id)\r\n        .then(() => {\r\n          const addPlaylistTracksUrl = `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`;\r\n          fetch(addPlaylistTracksUrl, {\r\n            method: 'POST',\r\n            headers: headers,\r\n            body: JSON.stringify({\r\n              uris: trackUris\r\n            })\r\n          });\r\n        })\r\n    })\r\n  }\r\n};\r\n\r\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}