{"ast":null,"code":"import _asyncToGenerator from\"D:/Desktop - Data Drive/Project Workspace/SelfProjects/codeacademy-jamming-react/jamming/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"D:\\\\Desktop - Data Drive\\\\Project Workspace\\\\SelfProjects\\\\codeacademy-jamming-react\\\\jamming\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";var clientId='94eef475b40b4db5bb9ad65266f49b34';var accessToken=\"\";var redirectURI=\"https://bespoke-paprenjak-7522cb.netlify.app/\";export var Spotify={getAccessToken:function getAccessToken(){if(accessToken){return;}var accessTokenMatch=window.location.href.match(/access_token=([^&]*)/);var expiresInMatch=window.location.href.match(/expires_in=([^&]*)/);if(accessTokenMatch&&expiresInMatch){accessToken=accessTokenMatch[1];var expiresIn=Number(expiresInMatch[1]);window.setTimeout(function(){return accessToken=\"\";},expiresIn*1000);window.history.pushState(\"Access Token\",null,\"/\");// This clears the parameters, allowing us to grab a new access token when it expires.\nreturn accessToken;}else{var accessUrl=\"https://accounts.spotify.com/authorize?client_id=\".concat(clientId,\"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectURI);window.location=accessUrl;}},search:function search(searchTerm){var spotifyTracks=fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(searchTerm),{headers:{Authorization:\"Bearer \".concat(accessToken)}}).then(function(response){return response.json();}).then(function(jsonResponse){if(!jsonResponse){return[{}];}var tracks=jsonResponse.tracks.items.map(function(track){return{id:track.id,name:track.name,artist:track.artists[0].name,album:track.album.name,uri:track.uri};});return tracks;}).catch(function(error){console.log(\"Spotify search error\");});return spotifyTracks;},savePlaylist:function savePlaylist(playlistName,tracksUri){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var userId,playlistId;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(playlistName&&tracksUri){_context.next=2;break;}return _context.abrupt(\"return\");case 2:_context.next=4;return fetch(\"https://api.spotify.com/v1/me\",{headers:{Authorization:\"Bearer \".concat(accessToken)}}).then(function(response){return response.json();}).then(function(jsonResponse){return jsonResponse.id;}).catch(function(error){console.log(\"User id Fetch error\");});case 4:userId=_context.sent;_context.next=7;return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists\"),{method:\"POST\",headers:{Authorization:\"Bearer \".concat(accessToken),\"Content-Type\":\"application/json\"},body:JSON.stringify({name:playlistName}),json:true}).then(function(response){return response.json();}).then(function(jsonResponse){return jsonResponse.id;}).catch(function(error){console.log(\"Create Playlist error\");});case 7:playlistId=_context.sent;_context.next=10;return fetch(\"https://api.spotify.com/v1/playlists/\".concat(playlistId,\"/tracks\"),{method:\"POST\",headers:{Authorization:\"Bearer \".concat(accessToken),\"Content-Type\":\"application/json\"},body:JSON.stringify({uris:tracksUri})}).then(function(response){console.log(\"Songs added to playlist\");}).catch(function(error){console.log(\"Fetch error while adding songs to the playlist\");});case 10:case\"end\":return _context.stop();}}},_callee);}))();}};","map":{"version":3,"sources":["D:/Desktop - Data Drive/Project Workspace/SelfProjects/codeacademy-jamming-react/jamming/src/util/Spotify.js"],"names":["clientId","accessToken","redirectURI","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","searchTerm","spotifyTracks","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","catch","error","console","log","savePlaylist","playlistName","tracksUri","userId","method","body","JSON","stringify","playlistId","uris"],"mappings":"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","sourcesContent":["const clientId = '94eef475b40b4db5bb9ad65266f49b34';\r\nlet accessToken = \"\";\r\nconst redirectURI = \"https://bespoke-paprenjak-7522cb.netlify.app/\";\r\n\r\nexport const Spotify = {\r\n  getAccessToken() {\r\n    if (accessToken) {\r\n      return;\r\n    }\r\n\r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n    if (accessTokenMatch && expiresInMatch) {\r\n      accessToken = accessTokenMatch[1];\r\n      const expiresIn = Number(expiresInMatch[1]);\r\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\r\n      window.history.pushState(\"Access Token\", null, \"/\"); // This clears the parameters, allowing us to grab a new access token when it expires.\r\n\r\n      return accessToken;\r\n    } else {\r\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\r\n      window.location = accessUrl;\r\n    }\r\n  },\r\n\r\n  search(searchTerm) {\r\n    let spotifyTracks = fetch(\r\n      `https://api.spotify.com/v1/search?type=track&q=${searchTerm}`,\r\n      {\r\n        headers: { Authorization: `Bearer ${accessToken}` },\r\n      }\r\n    )\r\n      .then((response) => response.json())\r\n      .then((jsonResponse) => {\r\n        if (!jsonResponse) {\r\n          return [{}];\r\n        }\r\n\r\n        let tracks = jsonResponse.tracks.items.map((track) => ({\r\n          id: track.id,\r\n          name: track.name,\r\n          artist: track.artists[0].name,\r\n          album: track.album.name,\r\n          uri: track.uri,\r\n        }));\r\n\r\n        return tracks;\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Spotify search error\");\r\n      });\r\n\r\n    return spotifyTracks;\r\n  },\r\n\r\n  async savePlaylist(playlistName, tracksUri) {\r\n    if (!(playlistName && tracksUri)) return;\r\n\r\n    // Get spotify user Id\r\n    let userId = await fetch(\"https://api.spotify.com/v1/me\", {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((jsonResponse) => jsonResponse.id)\r\n      .catch((error) => {\r\n        console.log(\"User id Fetch error\");\r\n      });\r\n\r\n    // Create playlist\r\n    let playlistId = await fetch(\r\n      `https://api.spotify.com/v1/users/${userId}/playlists`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          name: playlistName,\r\n        }),\r\n        json: true,\r\n      }\r\n    )\r\n      .then((response) => response.json())\r\n      .then((jsonResponse) => jsonResponse.id)\r\n      .catch((error) => {\r\n        console.log(\"Create Playlist error\");\r\n      });\r\n\r\n    await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        uris: tracksUri,\r\n      }),\r\n    })\r\n      .then((response) => {\r\n        console.log(\"Songs added to playlist\");\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Fetch error while adding songs to the playlist\");\r\n      });\r\n  },\r\n};\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}