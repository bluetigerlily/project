{"ast":null,"code":"const clientId = '94eef475b40b4db5bb9ad65266f49b34';\nlet accessToken = \"\";\nconst redirectURI = \"https://bespoke-paprenjak-7522cb.netlify.app/\"; //http://localhost:3000/ - for testing\n//https://bespoke-paprenjak-7522cb.netlify.app/ - for deployment \n\nexport const Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = \"\", expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, \"/\"); // This clears the parameters, allowing us to grab a new access token when it expires.\n\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(searchTerm) {\n    let spotifyTracks = fetch(`https://api.spotify.com/v1/search?type=track&q=${searchTerm}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => response.json()).then(jsonResponse => {\n      if (!jsonResponse) {\n        return [{}];\n      }\n\n      let tracks = jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n      return tracks;\n    }).catch(error => {\n      console.log(\"Spotify search error\");\n    });\n    return spotifyTracks;\n  },\n\n  async savePlaylist(playlistName, tracksUri) {\n    if (!(playlistName && tracksUri)) return; // Get spotify user Id\n\n    let userId = await fetch(\"https://api.spotify.com/v1/me\", {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => response.json()).then(jsonResponse => jsonResponse.id).catch(error => {\n      console.log(\"User id Fetch error\");\n    }); // Create playlist\n\n    let playlistId = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name: playlistName\n      }),\n      json: true\n    }).then(response => response.json()).then(jsonResponse => jsonResponse.id).catch(error => {\n      console.log(\"Create Playlist error\");\n    });\n    await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        uris: tracksUri\n      })\n    }).then(response => {\n      console.log(\"Songs added to playlist\");\n    }).catch(error => {\n      console.log(\"Fetch error while adding songs to the playlist\");\n    });\n  }\n\n};","map":{"version":3,"sources":["D:/Desktop - Data Drive/Project Workspace/SelfProjects/codeacademy-jamming-react/jamming/src/util/Spotify.js"],"names":["clientId","accessToken","redirectURI","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","searchTerm","spotifyTracks","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","catch","error","console","log","savePlaylist","playlistName","tracksUri","userId","playlistId","method","body","JSON","stringify","uris"],"mappings":"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","sourcesContent":["const clientId = '94eef475b40b4db5bb9ad65266f49b34';\r\nlet accessToken = \"\";\r\nconst redirectURI = \"https://bespoke-paprenjak-7522cb.netlify.app/\";\r\n//http://localhost:3000/ - for testing\r\n//https://bespoke-paprenjak-7522cb.netlify.app/ - for deployment \r\n\r\nexport const Spotify = {\r\n  getAccessToken() {\r\n    if (accessToken) {\r\n      return;\r\n    }\r\n\r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n    if (accessTokenMatch && expiresInMatch) {\r\n      accessToken = accessTokenMatch[1];\r\n      const expiresIn = Number(expiresInMatch[1]);\r\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\r\n      window.history.pushState(\"Access Token\", null, \"/\"); // This clears the parameters, allowing us to grab a new access token when it expires.\r\n\r\n      return accessToken;\r\n    } else {\r\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\r\n      window.location = accessUrl;\r\n    }\r\n  },\r\n\r\n  search(searchTerm) {\r\n    let spotifyTracks = fetch(\r\n      `https://api.spotify.com/v1/search?type=track&q=${searchTerm}`,\r\n      {\r\n        headers: { Authorization: `Bearer ${accessToken}` },\r\n      }\r\n    )\r\n      .then((response) => response.json())\r\n      .then((jsonResponse) => {\r\n        if (!jsonResponse) {\r\n          return [{}];\r\n        }\r\n\r\n        let tracks = jsonResponse.tracks.items.map((track) => ({\r\n          id: track.id,\r\n          name: track.name,\r\n          artist: track.artists[0].name,\r\n          album: track.album.name,\r\n          uri: track.uri,\r\n        }));\r\n\r\n        return tracks;\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Spotify search error\");\r\n      });\r\n\r\n    return spotifyTracks;\r\n  },\r\n\r\n  async savePlaylist(playlistName, tracksUri) {\r\n    if (!(playlistName && tracksUri)) return;\r\n\r\n    // Get spotify user Id\r\n    let userId = await fetch(\"https://api.spotify.com/v1/me\", {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((jsonResponse) => jsonResponse.id)\r\n      .catch((error) => {\r\n        console.log(\"User id Fetch error\");\r\n      });\r\n\r\n    // Create playlist\r\n    let playlistId = await fetch(\r\n      `https://api.spotify.com/v1/users/${userId}/playlists`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          name: playlistName,\r\n        }),\r\n        json: true,\r\n      }\r\n    )\r\n      .then((response) => response.json())\r\n      .then((jsonResponse) => jsonResponse.id)\r\n      .catch((error) => {\r\n        console.log(\"Create Playlist error\");\r\n      });\r\n\r\n    await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        uris: tracksUri,\r\n      }),\r\n    })\r\n      .then((response) => {\r\n        console.log(\"Songs added to playlist\");\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Fetch error while adding songs to the playlist\");\r\n      });\r\n  },\r\n};\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}