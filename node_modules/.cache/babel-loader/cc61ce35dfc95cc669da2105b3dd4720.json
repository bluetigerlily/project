{"ast":null,"code":"var clientId='94eef475b40b4db5bb9ad65266f49b34';var redirectUri='http://localhost:3000/';var accessToken;var Spotify={getAccessToken:function getAccessToken(){if(accessToken){return accessToken;}// check for acces token match\nvar accessTokenMatch=window.location.href.match(/access_token=([^&]*)/);var expiresInMatch=window.location.href.match(/expires_in=([^&]*)/);if(accessTokenMatch&&expiresInMatch){accessToken=accessTokenMatch[1];var expiresIn=Number(expiresInMatch[1]);//This clears the parameters, allowing us to grab a new access token when it expires\nwindow.setTimeout(function(){return accessToken='';},expiresIn*1000);window.history.pushState('Access token',null,'/');}else{var accessUrl=\"https://accounts.spotify.com/authorize?client_id=\".concat(clientId,\"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectUri);window.location=accessUrl;console.log(accessUrl);}},search:function search(term){accessToken=Spotify.getAccessToken();console.log(accessToken);return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term),{headers:{Authorization:\"Bearer \".concat(accessToken)}}).then(function(response){//console.log(response.json())\nreturn response.json();}).then(function(jsonResponse){if(!jsonResponse.tracks){return[];}return jsonResponse.tracks.items.map(function(track){return{id:track.id,name:track.name,artist:track.artist[0].name,album:track.album.name,uri:track.uri};});}).catch(function(error){console.log(error);});},savePlaylist:function savePlaylist(name,trackUris){if(!name||!trackUris.length){return;}var accessToken=Spotify.getAccessToken();var headers={Authorization:\"Bearer \".concat(accessToken)};var userId;return fetch('https://api.spotify.com/v1/me',{headers:headers}).then(function(response){return response.json();}).then(function(jsonResponse){userId=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists\"),{headers:headers,method:'POST',body:JSON.stringify({name:name})});}).then(function(response){return response.json();}).then(function(jsonResponse){var playlistId=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists/\").concat(playlistId,\"/tracks\"),{headers:headers,method:'POST',body:JSON.stringify({uris:trackUris})});});}};export default Spotify;//   search(term) {\n//     const searchUrl = `https://api.spotify.com/v1/search?type=track&q=${term.replace(' ', '%20')}`;\n//     return fetch(searchUrl, {\n//         headers: {\n//           Authorization: `Bearer ${accessToken}`\n//         }\n//       })\n//       .then(response => response.json())\n//       .then(jsonResponse => {\n//         if (!jsonResponse.tracks) return [];\n//         return jsonResponse.tracks.items.map(track => {\n//           return {\n//             id: track.id,\n//             name: track.name,\n//             artist: track.artists[0].name,\n//             album: track.album.name,\n//             uri: track.uri\n//           }\n//         })\n//       });\n//   },\n//   savePlaylist(name, trackUris) {\n//     if (!name || !trackUris || trackUris.length === 0) return;\n//     const userUrl = 'https://api.spotify.com/v1/me';\n//     const headers = {\n//       Authorization: `Bearer ${accessToken}`\n//     };\n//     let userId = undefined;\n//     let playlistId = undefined;\n//     fetch(userUrl, {\n//       headers: headers \n//     })\n//     .then(response => response.json())\n//     .then(jsonResponse => userId = jsonResponse.id)\n//     .then(() => {\n//       const createPlaylistUrl = `https://api.spotify.com/v1/users/${userId}/playlists`;\n//       fetch(createPlaylistUrl, {\n//           method: 'POST',\n//           headers: headers,\n//           body: JSON.stringify({\n//             name: name\n//           })\n//         })\n//         .then(response => response.json())\n//         .then(jsonResponse => playlistId = jsonResponse.id)\n//         .then(() => {\n//           const addPlaylistTracksUrl = `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`;\n//           fetch(addPlaylistTracksUrl, {\n//             method: 'POST',\n//             headers: headers,\n//             body: JSON.stringify({\n//               uris: trackUris\n//             })\n//           });\n//         })\n//     })\n//   }\n// };","map":{"version":3,"sources":["D:/Desktop - Data Drive/AnimalProject/codeacademy-jamming-react/jamming/src/util/Spotify.js"],"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","console","log","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","album","uri","catch","error","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris"],"mappings":"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","sourcesContent":["const clientId = '94eef475b40b4db5bb9ad65266f49b34';\r\nconst redirectUri = 'http://localhost:3000/';\r\nlet accessToken;\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n\r\n        // check for acces token match\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if (accessTokenMatch && expiresInMatch) {\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1])\r\n            //This clears the parameters, allowing us to grab a new access token when it expires\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access token', null, '/');\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n            window.location = accessUrl;\r\n            console.log(accessUrl);\r\n        }\r\n    },\r\n\r\n    search(term) {\r\n        accessToken = Spotify.getAccessToken();\r\n        console.log(accessToken)\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,\r\n            {\r\n                headers: {\r\n                    Authorization: `Bearer ${accessToken}`\r\n                }\r\n            }).then(response => {\r\n                //console.log(response.json())\r\n                return response.json()\r\n            }).then(jsonResponse => {\r\n                if (!jsonResponse.tracks) {\r\n                    return []\r\n                }\r\n                return jsonResponse.tracks.items.map(track => ({\r\n                    id: track.id,\r\n                    name: track.name,\r\n                    artist: track.artist[0].name,\r\n                    album: track.album.name,\r\n                    uri: track.uri\r\n                }))\r\n            }).catch(error => {\r\n                console.log(error)\r\n            })\r\n    },\r\n\r\n    savePlaylist(name, trackUris) {\r\n        if (!name || !trackUris.length) {\r\n            return;\r\n        }\r\n\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = { Authorization: `Bearer ${accessToken}` };\r\n        let userId;\r\n\r\n        return fetch('https://api.spotify.com/v1/me', { headers: headers }\r\n        ).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n            userId = jsonResponse.id;\r\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\r\n            {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({ name: name })\r\n            })\r\n        }).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n            const playlistId = jsonResponse.id;\r\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({uris: trackUris})\r\n            })\r\n        })\r\n    }\r\n}\r\nexport default Spotify;\r\n\r\n//   search(term) {\r\n//     const searchUrl = `https://api.spotify.com/v1/search?type=track&q=${term.replace(' ', '%20')}`;\r\n//     return fetch(searchUrl, {\r\n//         headers: {\r\n//           Authorization: `Bearer ${accessToken}`\r\n//         }\r\n//       })\r\n//       .then(response => response.json())\r\n//       .then(jsonResponse => {\r\n//         if (!jsonResponse.tracks) return [];\r\n//         return jsonResponse.tracks.items.map(track => {\r\n//           return {\r\n//             id: track.id,\r\n//             name: track.name,\r\n//             artist: track.artists[0].name,\r\n//             album: track.album.name,\r\n//             uri: track.uri\r\n//           }\r\n//         })\r\n//       });\r\n//   },\r\n\r\n//   savePlaylist(name, trackUris) {\r\n//     if (!name || !trackUris || trackUris.length === 0) return;\r\n//     const userUrl = 'https://api.spotify.com/v1/me';\r\n//     const headers = {\r\n//       Authorization: `Bearer ${accessToken}`\r\n//     };\r\n//     let userId = undefined;\r\n//     let playlistId = undefined;\r\n//     fetch(userUrl, {\r\n//       headers: headers \r\n//     })\r\n//     .then(response => response.json())\r\n//     .then(jsonResponse => userId = jsonResponse.id)\r\n//     .then(() => {\r\n//       const createPlaylistUrl = `https://api.spotify.com/v1/users/${userId}/playlists`;\r\n//       fetch(createPlaylistUrl, {\r\n//           method: 'POST',\r\n//           headers: headers,\r\n//           body: JSON.stringify({\r\n//             name: name\r\n//           })\r\n//         })\r\n//         .then(response => response.json())\r\n//         .then(jsonResponse => playlistId = jsonResponse.id)\r\n//         .then(() => {\r\n//           const addPlaylistTracksUrl = `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`;\r\n//           fetch(addPlaylistTracksUrl, {\r\n//             method: 'POST',\r\n//             headers: headers,\r\n//             body: JSON.stringify({\r\n//               uris: trackUris\r\n//             })\r\n//           });\r\n//         })\r\n//     })\r\n//   }\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}